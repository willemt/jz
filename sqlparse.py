#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import graken, Parser


__version__ = (2014, 11, 4, 2, 42, 12, 1)

__all__ = [
    'sqlParser',
    'sqlSemantics',
    'main'
]


class sqlParser(Parser):
    def __init__(self, whitespace=None, nameguard=True, **kwargs):
        super(sqlParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            **kwargs
        )

    @graken()
    def _query_(self):
        with self._optional():
            self._select_()
        self.ast['select'] = self.last_node
        with self._optional():
            self._where_()
        self.ast['where'] = self.last_node
        with self._optional():
            self._groupby_()
        self.ast['groupby'] = self.last_node
        self._check_eof()

        self.ast._define(
            ['select', 'where', 'groupby'],
            []
        )

    @graken()
    def _arglist_(self):
        self._token('(')
        self._arg_()
        self.ast.setlist('@', self.last_node)

        def block1():
            self._token(',')
            self._arg_()
            self.ast.setlist('@', self.last_node)
        self._closure(block1)
        self._token(')')

    @graken()
    def _function_(self):
        self._identifier_()
        self._arglist_()

    @graken()
    def _number_(self):
        self._pattern(r'[0-9]+')

    @graken()
    def _identifier_(self):
        self._pattern(r'[a-z]+')

    @graken()
    def _arg_(self):
        with self._choice():
            with self._option():
                self._identifier_()
            with self._option():
                self._number_()
            self._error('no available options')

    @graken()
    def _op_(self):
        with self._choice():
            with self._option():
                self._token('<')
            with self._option():
                self._token('>')
            with self._option():
                self._token('=')
            with self._option():
                self._token('<=')
            with self._option():
                self._token('>=')
            self._error('expecting one of: < <= = > >=')

    @graken()
    def _expression_(self):
        with self._choice():
            with self._option():
                self._function_()
            with self._option():
                self._identifier_()
                with self._optional():
                    self._op_()
                    self._arg_()
            with self._option():
                with self._optional():
                    self._arg_()
                    self._op_()
                self._identifier_()
            self._error('no available options')

    @graken()
    def _select_(self):
        self._token('SELECT')
        self._select_contents_()
        self.ast['@'] = self.last_node

    @graken()
    def _select_contents_(self):
        self._expression_()
        self.ast.setlist('@', self.last_node)

        def block1():
            self._token(',')
            self._expression_()
            self.ast.setlist('@', self.last_node)
        self._closure(block1)

    @graken()
    def _bool_(self):
        with self._choice():
            with self._option():
                self._token('AND')
            with self._option():
                self._token('OR')
            self._error('expecting one of: AND OR')

    @graken()
    def _test_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._expression_()
                self.ast['@'] = self.last_node

                def block1():
                    with self._group():
                        self._bool_()
                        self._test_()
                    self.ast['@'] = self.last_node
                self._closure(block1)
                self._token(')')

                def block3():
                    with self._group():
                        self._bool_()
                        self._test_()
                    self.ast['@'] = self.last_node
                self._closure(block3)
            with self._option():
                self._expression_()
                self.ast['@'] = self.last_node

                def block6():
                    with self._group():
                        self._bool_()
                        self._test_()
                    self.ast['@'] = self.last_node
                self._closure(block6)
            self._error('no available options')

    @graken()
    def _where_(self):
        self._token('WHERE')
        self._test_()
        self.ast.setlist('@', self.last_node)

    @graken()
    def _groupby_(self):
        self._token('GROUP BY')
        self._groupby_clause_()
        self.ast['@'] = self.last_node

    @graken()
    def _groupby_clause_(self):
        self._expression_()
        self.ast.setlist('@', self.last_node)

        def block1():
            self._token(',')
            self._expression_()
            self.ast.setlist('@', self.last_node)
        self._closure(block1)


class sqlSemantics(object):
    def query(self, ast):
        return ast

    def arglist(self, ast):
        return ast

    def function(self, ast):
        return ast

    def number(self, ast):
        return ast

    def identifier(self, ast):
        return ast

    def arg(self, ast):
        return ast

    def op(self, ast):
        return ast

    def expression(self, ast):
        return ast

    def select(self, ast):
        return ast

    def select_contents(self, ast):
        return ast

    def bool(self, ast):
        return ast

    def test(self, ast):
        return ast

    def where(self, ast):
        return ast

    def groupby(self, ast):
        return ast

    def groupby_clause(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = sqlParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in sqlParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for sql.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(
        args.file,
        args.startrule,
        trace=args.trace,
        whitespace=args.whitespace
    )

